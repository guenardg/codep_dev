?dist
?plot
?mtext
library(codep)
?LGTransforms
data(Doubs)
Doubs.fish -> x
x[rowSums(x)!=0,] -> x
LGTransforms(x,"chord") -> chord
LGTransforms(x,"chisq") -> chisq
LGTransforms(x,"profile") -> sp_pr
LGTransforms(x,"Hellinger") -> Helli
dist(chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
data(LGDat)
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
par(mfrow=c(2,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
?mahal
?mahalanobis
mahalanobis(matrix(c(1,2,3,4),2,2),matrix(c(1,2,3,4),2,2),matrix(c(1,2,3,4),2,2))
mahalanobis
matrix(c(1,2,3,4),2,2)
center
mahalanobis(matrix(c(1,2,3,4),2,2),c(1,2),matrix(c(1,2,3,4),2,2))
compile <- function() {
try(dyn.unload("./src/Mahal.so"),silent=TRUE)
system("R CMD SHLIB ./src/Mahal.c")
dyn.load("./src/Mahal.so")
source("./R/Mahal.R")
}
##
compile()
compile()
rnorm(15,5,3)
matrix(rnorm(15,5,1),5,3)
##
mat <- matrix(rnorm(15,5,1),5,3)
rm(mat)
x <- matrix(rnorm(30,5,1),10,3)
x
x <- matrix(rnorm(30,5,2),10,3)
x
matrix(c(1,2,3,2,1,3,3,2,1),2,2)
matrix(c(1,2,3,2,1,3,3,2,1),3,3)
cov <- matrix(c(1,2,3,2,1,3,3,2,1),3,3)
solve(cov)
cov <- matrix(c(1,2,3,2,1,3,3,2,0.5),3,3)
solve(cov)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
solve(cov)
Mahal(x,cov=cov)
dist(x)
Mahal(x,x,cov=cov)
Mahal(x,cov=cov)
Euclid(x)
dist(x)
compile <- function() {
try(dyn.unload("./src/Mahal.so"),silent=TRUE)
system("R CMD SHLIB ./src/Mahal.c")
dyn.load("./src/Mahal.so")
source("./R/Mahal.R")
}
##
compile()
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
## solve(cov)
Mahal(x)
Mahal(x, cov = cov)
dist(x)
Mahal(x, x, cov = cov)
dist(x)
Mahal(x, x, cov = cov)
## solve(cov)
Mahal(x, cov = cov)
dist(x)
##
compile()
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
## solve(cov)
Mahal(x, cov = cov)
dist(x)
##
compile()
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
## solve(cov)
Mahal(x, cov = cov)
##
compile()
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
## solve(cov)
Mahal(x, cov = cov)
dist(x)
Mahal(x, x[1:3,], cov = cov)
##
Mahal(x, x[,1:3], cov = cov)
x[,1:3]
Mahal(x, x[,1:2], cov = cov)
Mahal(x, x[1:3,], cov = cov)
Mahal(x[4:10,], x[1:3,], cov = cov)
##
Mahal(x[1:3,], x[4:10,], cov = cov)
library(codep)
x
rm(list=ls())
##
### MCA
### Example 1: St. Marguerite River Salmon Transect
data(salmon)
## Converting the data from data frames to to matrices:
Abundance <- log1p(as.matrix(salmon[,"Abundance",drop = FALSE]))
Environ <- as.matrix(salmon[,3L:5])
## Creating a spatial eigenvector map:
map1 <- eigenmap(x = salmon[,"Position"], weighting = wf.binary,
boundaries = c(0,20))
## Case of a single descriptor:
mca1 <- MCA(Y = Abundance, X = Environ[,"Substrate",drop = FALSE],
emobj = map1)
mca1
mca1_partest <- test.cdp(mca1)
mca1_partest
summary(mca1_partest)
par(mar = c(6,4,2,4))
plot(mca1_partest, las = 3)
mca1_pertest <- permute.cdp(mca1)
## End(Not run)
mca1_pertest
summary(mca1_pertest)
plot(mca1_pertest, las = 3)
mca1_pertest$UpYXcb$C # Array containing the codependence coefficients
## With all descriptors at once:
mca2 <- MCA(Y = log1p(as.matrix(salmon[,"Abundance",drop = FALSE])),
X = as.matrix(salmon[,3L:5]), emobj = map1)
mca2
mca2_partest <- test.cdp(mca2)
mca2_partest
summary(mca2_partest)
par(mar = c(6,4,2,4))
plot(mca2_partest, las = 3)
mca2_pertest <- permute.cdp(mca2)
## End(Not run)
mca2_pertest
summary(mca2_pertest)
plot(mca2_pertest, las = 3)
mca2_pertest$UpYXcb$C # Array containing the codependence coefficients
mca2_pertest$UpYXcb$C[,1L,] # now turned into a matrix.
data(Doubs)
## Creating a spatial eigenvector map:
map2 <- eigenmap(x = Doubs.geo[,"DFS"])
mca3 <- MCA(Y = LGTransforms(Doubs.fish,"Hellinger"), X=Doubs.env, emobj = map2)
mca3
LGTransforms(Doubs.fish,"Hellinger")
LGTransforms(Doubs.fish[-8L,],"Hellinger")
mca3 <- MCA(Y = LGTransforms(Doubs.fish[-8L,],"Hellinger"),
X=Doubs.env, emobj = map2)
which(rowSums(Doubs.fish) != 0)
sel <- which(rowSums(Doubs.fish) != 0)
rm(sel)
excl <- which(rowSums(Doubs.fish) == 0)
excl
Doubs.geo[-excl,"DFS"]
data(Doubs)
## Sites with no fish observed are excluded:
excl <- which(rowSums(Doubs.fish) == 0)
## Creating a spatial eigenvector map:
map2 <- eigenmap(x = Doubs.geo[-excl,"DFS"])
mca3 <- MCA(Y = LGTransforms(Doubs.fish[-excl,],"Hellinger"),
X=Doubs.env[-excl,], emobj = map2)
mca3
mca3_pertest <- permute.cdp(mca3)
## End(Not run)
mca3_pertest
summary(mca3_pertest)
par(mar = c(6,4,2,4))
plot(mca3_pertest, las = 2)
mca3_pertest$UpYXcb$C # Array containing the codependence coefficients
Y <- LGTransforms(Doubs.fish[-excl,],"Hellinger")
Y
## Sites with no fish observed are excluded:
excl <- which(rowSums(Doubs.fish) == 0)
## Creating a spatial eigenvector map:
map2 <- eigenmap(x = Doubs.geo[-excl,"DFS"])
## Response analyzed on the basis of the Hellinger distance:
Y <- LGTransforms(Doubs.fish[-excl,],"Hellinger")
mca3 <- MCA(Y = Y, X=Doubs.env[-excl,], emobj = map2)
mca3
mca3_pertest <- permute.cdp(mca3)
## Not run:
## or:
mca3_pertest <- parPermute.cdp(mca3, permute = 999999)
## End(Not run)
mca3_pertest
summary(mca3_pertest)
par(mar = c(6,4,2,4))
plot(mca3_pertest, las = 2)
mca3_pertest$UpYXcb$C # Array containing the codependence coefficients
spmeans <- colMeans(Y)
spmeans
pca1 <- svd(Y - rep(spmeans, each=nrow(Y)))
pca1
par(mar = c(5,5,2,5) + 0.1)
plot(y = pca1$u[,1L], x = Doubs.geo[-excl,"DFS"], pch = 21L, bg = "red",
ylab = "PCA1 loadings", xlab = "Distance from river source (km)")
x <- seq(0,450,1)
Doubs.geo[-excl,]
newdists <- matrix(NA, length(x), nrow(Doubs.geo[-excl,]))
for(i in 1L:nrow(newdists))
newdists[i,] <- abs(Doubs.geo[-excl,"DFS"] - x[i])
prd1 <- predict(mca3_pertest,
newdata = list(target = eigenmap.score(map2, newdists)))
## Projection of the predicted species abundance on pca1:
Uprd1 <-
(prd1 - rep(spmeans, each = nrow(prd1))) %*%
pca1$v %*% diag(pca1$d^-1)
lines(y = Uprd1[,1L], x = x, col=2, lty = 1)
## Projection of the predicted species abundance on pca2:
plot(y = pca1$u[,2L], x = Doubs.geo[-excl,"DFS"], pch = 21L, bg = "red",
ylab = "PCA2 loadings", xlab = "Distance from river source (km)")
lines(y = Uprd1[,2L], x = x, col=2, lty = 1)
## Displaying only the observed and predicted abundance for Brown Trout.
par(new = TRUE)
Y[,"TRU"]
par(new = TRUE)
plot(y = Y[,"TRU"], Doubs.geo[-excl,"DFS"], pch = 21L,
bg = "green", ylab = "", xlab = "", new = FALSE, axes = FALSE)
axis(4)
lines(y = prd1[,"TRU"], x = x, col = 3)
mtext(side = 4, "sqrt(relative abundance)", line = 2.5)
mtext(side = 4, "sqrt(Brown trout rel. abundance)", line = 2.5)
data(mite)
rm(list=ls())
##
### Example 1: St. Marguerite River Salmon Transect
data(salmon)
## Converting the data from data frames to to matrices:
Abundance <- log1p(as.matrix(salmon[,"Abundance",drop = FALSE]))
Environ <- as.matrix(salmon[,3L:5])
## Creating a spatial eigenvector map:
map1 <- eigenmap(x = salmon[,"Position"], weighting = wf.binary,
boundaries = c(0,20))
## Case of a single descriptor:
mca1 <- MCA(Y = Abundance, X = Environ[,"Substrate",drop = FALSE],
emobj = map1)
mca1
mca1_partest <- test.cdp(mca1)
mca1_partest
summary(mca1_partest)
par(mar = c(6,4,2,4))
plot(mca1_partest, las = 3)
mca1_pertest <- permute.cdp(mca1)
## Not run:
## or:
mca1_pertest <- parPermute.cdp(mca1, permute = 999999)
## End(Not run)
mca1_pertest
summary(mca1_pertest)
plot(mca1_pertest, las = 3)
mca1_pertest$UpYXcb$C # Array containing the codependence coefficients
## With all descriptors at once:
mca2 <- MCA(Y = log1p(as.matrix(salmon[,"Abundance",drop = FALSE])),
X = as.matrix(salmon[,3L:5]), emobj = map1)
mca2
mca2_partest <- test.cdp(mca2)
mca2_partest
summary(mca2_partest)
par(mar = c(6,4,2,4))
plot(mca2_partest, las = 3)
mca2_pertest <- permute.cdp(mca2)
## Not run:
## or:
mca2_pertest <- parPermute.cdp(mca2, permute = 999999)
## End(Not run)
mca2_pertest
summary(mca2_pertest)
plot(mca2_pertest, las = 3)
mca2_pertest$UpYXcb$C # Array containing the codependence coefficients
mca2_pertest$UpYXcb$C[,1L,] # now turned into a matrix.
data(Doubs)
## Creating a spatial eigenvector map:
map2 <- eigenmap(x = Doubs.geo[,"DFS"])
mca3 <- MCA(Y = log1p(Doubs.fish), X=Doubs.env, emobj = map2)
mca3
mca3_pertest <- permute.cdp(mca3)
## Not run:
## or:
mca3_pertest <- parPermute.cdp(mca3, permute = 999999)
## End(Not run)
mca3_pertest
summary(mca3_pertest)
par(mar = c(6,4,2,4))
plot(mca3_pertest, las = 2)
mca3_pertest$UpYXcb$C # Array containing the codependence coefficients
plot(mca3_pertest, las = 2, lwd=2)
plot(mca3_pertest, las = 2, lwd=3)
plot(mca3_pertest, las = 2, lwd=2)
plot(mca3_pertest, las = 2, lwd=3)
plot(mca3_pertest, las = 2, lwd=3)
mca3_pertest$UpYXcb$C # Array containing the codependence coefficients
## Display the results along the transect
spmeans <- colMeans(log1p(Doubs.fish))
pca1 <- svd(log1p(Doubs.fish) - rep(spmeans,each=nrow(Doubs.fish)))
par(mar = c(5,5,2,5) + 0.1)
plot(y = pca1$u[,1L], x = Doubs.geo[,"DFS"], pch = 21L, bg = "red",
ylab = "PCA1 loadings", xlab = "Distance from river source (km)")
x <- seq(0,450,1)
newdists <- matrix(NA, length(x), nrow(Doubs.geo))
for(i in 1L:nrow(newdists))
newdists[i,] <- abs(Doubs.geo[,"DFS"] - x[i])
## Calculating predictions for arbitrary sites under the same set of
## environmental conditions that the codependence model was built with.
prd1 <- predict(mca3_pertest,
newdata = list(target = eigenmap.score(map2, newdists)))
## Projection of the predicted species abundance on pca1:
Uprd1 <-
(prd1 - rep(spmeans, each = nrow(prd1))) %*%
pca1$v %*% diag(pca1$d^-1)
lines(y = Uprd1[,1L], x = x, col=2, lty = 1)
## Projection of the predicted species abundance on pca2:
plot(y = pca1$u[,2L], x = Doubs.geo[,"DFS"], pch = 21L, bg = "red",
ylab = "PCA2 loadings", xlab = "Distance from river source (km)")
lines(y = Uprd1[,2L], x = x, col=2, lty = 1)
## Displaying only the observed and predicted abundance for Brown Trout.
par(new = TRUE)
plot(y = log1p(Doubs.fish[,"TRU"]), Doubs.geo[,"DFS"], pch = 21L,
bg = "green", ylab = "", xlab = "", new = FALSE, axes = FALSE)
axis(4)
lines(y = prd1[,"TRU"], x = x, col = 3)
mtext(side = 4, "log(Abundance+1)", line = 2.5)
data(mite)
map3 <- eigenmap(x = mite.geo)
## Organize the environmental variables
mca4 <- MCA(Y = log1p(mite.species), X = mite.env, emobj = map3)
mca4_partest <- test.cdp(mca4, response.tests = FALSE)
summary(mca4_partest)
plot(mca4_partest, las = 2, lwd = 2)
plot(mca4_partest, col = rainbow(1200)[1L:1000], las = 3, lwd = 4,
main = "Codependence diagram", col.signif = "white")
rng <- list(x = seq(min(mite.geo[,"x"]) - 0.1, max(mite.geo[,"x"]) + 0.1, 0.05),
y = seq(min(mite.geo[,"y"]) - 0.1, max(mite.geo[,"y"]) + 0.1, 0.05))
grid <- cbind(x = rep(rng[["x"]], length(rng[["y"]])),
y = rep(rng[["y"]], each = length(rng[["x"]])))
newdists <- matrix(NA, nrow(grid), nrow(mite.geo))
for(i in 1L:nrow(grid)) {
newdists[i,] <- ((mite.geo[,"x"] - grid[i,"x"])^2 +
(mite.geo[,"y"] - grid[i,"y"])^2)^0.5
}
spmeans <- colMeans(log1p(mite.species))
pca2 <- svd(log1p(mite.species) - rep(spmeans, each = nrow(mite.species)))
prd2 <- predict(mca4_partest,
newdata = list(target = eigenmap.score(map3, newdists)))
Uprd2 <-
(prd2 - rep(spmeans, each = nrow(prd2))) %*%
pca2$v %*% diag(pca2$d^-1)
## Printing the response variable (first principal component of the mite
## community structure).
prmat <- Uprd2[,1L]
dim(prmat) <- c(length(rng$x), length(rng$y))
zlim <- c(min(min(prmat), min(pca2$u[,1L])), max(max(prmat),
max(pca2$u[,1L])))
image(z = prmat, x = rng$x, y = rng$y, asp = 1, zlim = zlim,
col = rainbow(1200L)[1L:1000], ylab = "y", xlab = "x")
points(
x=mite.geo[,"x"], y=mite.geo[,"y"], pch=21L,
bg = rainbow(1200L)[round(1+(999*(pca2$u[,1L]-zlim[1L])/(zlim[2L]-zlim[1L])),0)])
Y <- LGTransforms(mite.species, "Hellinger")
## Organize the environmental variables
mca4 <- MCA(Y = Y, X = mite.env, emobj = map3)
mca4_partest <- test.cdp(mca4, response.tests = FALSE)
summary(mca4_partest)
plot(mca4_partest, las = 2, lwd = 2)
plot(mca4_partest, col = rainbow(1200)[1L:1000], las = 3, lwd = 4,
main = "Codependence diagram", col.signif = "white")
rng <- list(x = seq(min(mite.geo[,"x"]) - 0.1, max(mite.geo[,"x"]) + 0.1, 0.05),
y = seq(min(mite.geo[,"y"]) - 0.1, max(mite.geo[,"y"]) + 0.1, 0.05))
grid <- cbind(x = rep(rng[["x"]], length(rng[["y"]])),
y = rep(rng[["y"]], each = length(rng[["x"]])))
newdists <- matrix(NA, nrow(grid), nrow(mite.geo))
for(i in 1L:nrow(grid)) {
newdists[i,] <- ((mite.geo[,"x"] - grid[i,"x"])^2 +
(mite.geo[,"y"] - grid[i,"y"])^2)^0.5
}
spmeans <- colMeans(Y)
pca2 <- svd(Y - rep(spmeans, each = nrow(Y)))
prd2 <- predict(mca4_partest,
newdata = list(target = eigenmap.score(map3, newdists)))
Uprd2 <-
(prd2 - rep(spmeans, each = nrow(prd2))) %*%
pca2$v %*% diag(pca2$d^-1)
## Printing the response variable (first principal component of the mite
## community structure).
prmat <- Uprd2[,1L]
dim(prmat) <- c(length(rng$x), length(rng$y))
zlim <- c(min(min(prmat), min(pca2$u[,1L])), max(max(prmat),
max(pca2$u[,1L])))
image(z = prmat, x = rng$x, y = rng$y, asp = 1, zlim = zlim,
col = rainbow(1200L)[1L:1000], ylab = "y", xlab = "x")
points(
x=mite.geo[,"x"], y=mite.geo[,"y"], pch=21L,
bg = rainbow(1200L)[round(1+(999*(pca2$u[,1L]-zlim[1L])/(zlim[2L]-zlim[1L])),0)])
rm(list=ls())
library(codep)
##
compile <- function() {
try(dyn.unload("./src/Mahal.so"),silent=TRUE)
system("R CMD SHLIB ./src/Mahal.c")
dyn.load("./src/Mahal.so")
source("./R/Mahal.R")
}
##
compile()
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
## solve(cov)
Mahal(x, cov = cov)
dist(x)
## solve(cov)
Mahal(x, cov = cov)
dist(x)
##
### codep package examples
##
## rm(list=ls())
##
library(codep)
##
compile <- function() {
try(dyn.unload("./src/Mahal.so"),silent=TRUE)
system("R CMD SHLIB ./src/Mahal.c")
dyn.load("./src/Mahal.so")
source("./R/Mahal.R")
}
##
compile()
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
## solve(cov)
Mahal(x, cov = cov)
dist(x)
## cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
cov <- diag(3)
cov
## solve(cov)
Mahal(x, cov = cov)
dist(x)
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
solve(cov)
cov <- matrix(c(1,2,3,2,1.5,3,3,2,0.5),3,3)
cov
##
x <- matrix(rnorm(30,5,2),10,3)
cov <- matrix(c(1,2,3,2,1.5,2,3,2,0.5),3,3)  ## solve(cov)
cov
solve(cov)
det(cov)
Mahal(x, cov = cov)
