LGTransforms(x,"chord",lambda=0) -> log.chord
LGTransforms(x,"chisq") -> chisq
LGTransforms(x,"profile") -> sp_pr
LGTransforms(x,"Hellinger") -> Helli
dist(chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
dist(chord)
dist(log.chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
data(LGDat)
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
## Raw Euclidean distances
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
## Euclidean distances on the transformed abundances:
par(mfrow=c(2,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
## Raw Euclidean distances
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
## Transforming the abundances
LGTransforms(x,"chord") -> chord
LGTransforms(x,"chord",lambda=0) -> log.chord
LGTransforms(x,"chord",lambda=0.25,alpha=0) -> pow.chord
LGTransforms(x,"chisq") -> chisq
LGTransforms(x,"profile") -> sp_pr
LGTransforms(x,"Hellinger") -> Helli
dist(chord)
dist(log.chord)
dist(chord)
dist(log.chord)
dist(pow.chord)
dist(chord)
dist(log.chord)
dist(pow.chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
data(LGDat)
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
## Raw Euclidean distances
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
## Euclidean distances on the transformed abundances:
par(mfrow=c(2,2), mar=c(5,5,4,2))
## Euclidean distances on the transformed abundances:
par(mfrow=c(3,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
par(mfrow=c(3,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25,alpha=0) -> pow.chord
as.matrix(dist(chord)) -> eco
par(mfrow=c(3,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25,alpha=0) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
par(mfrow=c(3,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25,alpha=0) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
## Euclidean distances on the transformed abundances:
par(mfrow=c(3,2), mar=c(5,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25,alpha=0) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
library(codep)
##
rm(list=ls())
library(codep)
?LGTransforms
library(codep)
?LGTransforms
data(Doubs)
Doubs.fish -> x
x[rowSums(x)!=0,] -> x
LGTransforms(x,"chord") -> chord
LGTransforms(x,"chord",lambda=0) -> log.chord
LGTransforms(x,"chord",lambda=0.25,alpha=0) -> pow.chord
LGTransforms(x,"chisq") -> chisq
LGTransforms(x,"profile") -> sp_pr
LGTransforms(x,"Hellinger") -> Helli
dist(chord)
dist(log.chord)
dist(pow.chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
data(LGDat)
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
## Euclidean distances on the transformed abundances:
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
rm(list=ls())
save.image()
data(Doubs)
## Removing any species that have not been not observed:
Doubs.fish -> x
x[rowSums(x)!=0,] -> x
## Transforming the abundances
LGTransforms(x,"chord") -> chord
LGTransforms(x,"chord",lambda=0) -> log.chord
LGTransforms(x,"chord",lambda=0.25,alpha=0) -> pow.chord
LGTransforms(x,"chisq") -> chisq
LGTransforms(x,"profile") -> sp_pr
LGTransforms(x,"Hellinger") -> Helli
dist(chord)
dist(log.chord)
dist(pow.chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
## Legendre & Gallagher synthetic examples:
data(LGDat)
## Diastemograms:
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
## Raw Euclidean distances
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
## Euclidean distances on the transformed abundances:
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
library(codep)
data(Doubs)
## Removing any species that have not been not observed:
Doubs.fish -> x
x[rowSums(x)!=0,] -> x
## Transforming the abundances
LGTransforms(x,"chord") -> chord
LGTransforms(x,"chord",lambda=0) -> log.chord
LGTransforms(x,"chord",lambda=0.25,alpha=0) -> pow.chord
LGTransforms(x,"chisq") -> chisq
LGTransforms(x,"profile") -> sp_pr
LGTransforms(x,"Hellinger") -> Helli
dist(chord)
dist(log.chord)
dist(pow.chord)
dist(chisq)
dist(sp_pr)
dist(Helli)
## Legendre & Gallagher synthetic examples:
data(LGDat)
## Diastemograms:
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
## Raw Euclidean distances
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
## Euclidean distances on the transformed abundances:
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",lambda=0.25) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
rm(list=ls())
