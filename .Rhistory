LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",lambda=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
## Euclidean distances on the transformed abundances:
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",offset=1,power=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",power=0.25) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",offset=1,power=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",power=0.5) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Box-Cox Chord distance (lambda=0.5)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
rm(list=ls())
##
tst2 <- matrix(c(0,0,0,0,0,0,1,3,5,4,2,0),2,6,byrow=TRUE)
##
### codep package examples
##
## rm(list=ls())
##
library(codep)
##
tst2 <- matrix(c(0,0,0,0,0,0,1,3,5,4,2,0),2,6,byrow=TRUE)
##
library(vegan)
res2.3 = decostand(tst2, "chi")
res2.3
res2.3 %>% dist
dist(res2.3)
res2.3[1,] - res2.3[1,]
sum(res2.3[1,] - res2.3[1,])
(res2.3[1,] - res2.3[1,])^2
(res2.3[1,] - res2.3[2,])^2
sum((res2.3[1,] - res2.3[2,])^2)
sqrt(sum((res2.3[1,] - res2.3[2,])^2))
sqrt(sum((res2.3[1,] - res2.3[2,])^2,na.rm=TRUE))
##
dist
library(inline)
library(inline)
?sprintf
res2.3[1,]
sprintf("%X",res2.3[1,])
sprintf("%g",res2.3[1,])
as.rawres2.3[1,])
as.raw(res2.3[1,])
library(inline)
show <- cfunction(
c(a = "double"),
"sprintf(\"%X\",a[0])"
)
show <- cfunction(
c(a = "double"),
"sprintf(\"%X\",a[0]);"
)
show <- cfunction(
c(a = "double"),
"printf(\"%X\",a[0]);"
)
show <- cfunction(
c(a = "double"),
"printf(\"Hello world\");"
)
show(1)
show <- cfunction(
c(a = "double"),
"printf(\"Hello world\");return;"
)
show(1)
show <- cfunction(
c(a = "double"),
"SEXP result = PROTECT(allocVector(NILSXP, 1));
printf(\"Hello world\");
return result;"
)
show(1)
show(1)
library(inline)
show <- cfunction(
c(a = "double"),
"SEXP result = PROTECT(allocVector(NILSXP, 1));
printf(\"Hello world\");
UNPROTECT(1);
return result;"
)
show(1)
show <- cfunction(
c(a = "double"),
"
SEXP result = PROTECT(allocVector(NILSXP, 1));
printf(\"Hello world\");
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
SEXP result = PROTECT(allocVector(NILSXP, 1));
int n = length(a);
printf(\"Hello world\");
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
SEXP result = PROTECT(allocVector(NILSXP, 1));
int i, n = length(a);
for(i = 0; i < n; i++)
printf(\"Hello world\",a[i]);
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
SEXP result = PROTECT(allocVector(NILSXP, 1));
int i, n = length(a);
for(i = 0; i < n; i++)
printf(\"Hello world %f\",a[i]);
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world\");
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world\n\");
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world\\n\");
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world %f\\n\",1.0);
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world %f\\n\",asDouble(a[i]));
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
double aa = asDouble(a)
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world %f\\n\",aa[i]);
UNPROTECT(1);
return result;
"
)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
double aa = asDouble(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world %f\\n\",aa[i]);
UNPROTECT(1);
return result;
"
)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
double aa = asDouble(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world\\n\");
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++)
printf(\"Hello world\\n\");
UNPROTECT(1);
return result;
"
)
show(1)
library(inline)
show <- cfunction(
c(a = "double"),
"
double aa;
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++) {
printf(\"Hello world\\n\");
}
UNPROTECT(1);
return result;
"
)
show(1)
show <- cfunction(
c(a = "double"),
"
double aa;
int i, n = length(a);
SEXP result = PROTECT(allocVector(NILSXP, 1));
for(i = 0; i < n; i++) {
aa = asDouble(a[i]);
printf(\"Hello world\\n\");
}
UNPROTECT(1);
return result;
"
)
show(1)
rm(show)
sqrt(sum((res2.3[1,] - res2.3[2,])^2, na.rm=TRUE))
6/5
sqrt(sum((res2.3[1,] - res2.3[2,])^2, na.rm=TRUE))
sqrt(6/5)
?dist
Euclid(res2.3)
res2.3[,-6L]
Euclid(res2.3[,-6L])
Euclid(res2.3[,-6L])
tst2[,-6L]
tst3 <- tst2[,-6L]
LGTransforms(tst3,"chord")
tst3 <- matrix(c(2,0,1,0,0,0,0,3,5,4,2,1),2,6,byrow=TRUE)
tst3
LGTransforms(tst3,"chord")
dist(LGTransforms(tst3,"chord"))
((tst3 + 1)^1 - 1)/1
a = 1
lambda = 1
dist(LGTransforms(((tst3 + a)^lambda - 1)/lambda,"chord"))
a = 2
lambda = 1
dist(LGTransforms(((tst3 + a)^lambda - 1)/lambda,"chord"))
a = 3
lambda = 1
dist(LGTransforms(((tst3 + a)^lambda - 1)/lambda,"chord"))
dist(LGTransforms((tst3,"chord"))
dist(LGTransforms(tst3,"chord"))
dist(LGTransforms(tst3^0.5,"chord"))
dist(LGTransforms(tst3,"Hellinger"))
dist(LGTransforms(tst3,"Hellinger"))
a = 0
lambda = 0.5
dist(LGTransforms(((tst3 + a)^lambda - 1)/lambda,"chord"))
libary(codep)
library(codep)
data(LGDat)
as.matrix(dist(LGDat[,1L])) -> geo
geo[upper.tri(geo)] -> geo
par(mfrow=c(1,1), mar=c(5,5,4,2))
as.matrix(dist(LGDat[,-1L])) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo, data=data.frame(geo=geo, eco=eco),
xaxp=c(1,18,17), las=1, ylim=c(0,max(eco)),
xlab="True geographic distance",
ylab="Euclidean distance")
par(mfrow=c(3,2), mar=c(3,5,4,2))
LGTransforms(LGDat[,-1L],"chord") -> chord
as.matrix(dist(chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chord",offset=1,power=0) -> log.chord
as.matrix(dist(log.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance (log(x+1))",ylim=c(0,max(eco)))
par(mar=c(4,5,3,2))
LGTransforms(LGDat[,-1L],"chord",power=0.25) -> pow.chord
as.matrix(dist(pow.chord)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chord distance (power=0.25)",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"chisq") -> chisq
as.matrix(dist(chisq)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Chi-square distance",ylim=c(0,max(eco)))
par(mar=c(5,5,2,2))
LGTransforms(LGDat[,-1L],"profile") -> sp_pr
as.matrix(dist(sp_pr)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Dist. between profiles",ylim=c(0,max(eco)))
LGTransforms(LGDat[,-1L],"Hellinger") -> Helli
as.matrix(dist(Helli)) -> eco
eco[upper.tri(eco)] -> eco
plot(eco~geo,data=data.frame(geo=geo,eco=eco),
xaxp=c(1,18,17),las=1,xlab="",ylab="",
main="Hellinger distance",ylim=c(0,max(eco)))
mtext(text="True geographic distance", side=1, line=-1.5, outer=TRUE)
mtext(text="Ecological distance", side=2, line=-1.5, outer=TRUE)
library(codep)
tst2 <- matrix(c(0,0,0,0,0,0,1,3,5,4,2,0),2,6,byrow=TRUE)
library(vegan)
res2.3 <- decostand(tst2, "chi")
dist(res2.3)
sqrt(sum((res2.3[1,] - res2.3[2,])^2, na.rm=TRUE))
sqrt(6/5)
Euclid(res2.3[,-6L])
tst3 <- matrix(c(2,0,1,0,0,0,0,3,5,4,2,1),2,6,byrow=TRUE)
dist(LGTransforms(tst3,"chord"))
a = 3
lambda = 1
dist(LGTransforms(((tst3 + a)^lambda - 1)/lambda,"chord"))
dist(LGTransforms(tst3,"chord"))
dist(LGTransforms(tst3^0.5,"chord"))
dist(LGTransforms(tst3,"Hellinger"))
a = 0
lambda = 0.5
dist(LGTransforms(((tst3 + a)^lambda - 1)/lambda,"chord"))
sprintf("%g",as.raw(res2.3[1,]))
matrix(c(0,0,1,4,1,0,8,1,0),3L,3L)
matrix(c(0,0,1,4,1,0,8,1,0),3L,3L) -> tst4
dist(tst4)
dist(tst4,LGTransforms("chord"))
dist(tst4,decostand("chord"))
LGTransforms(tst4,"chord")
dist(LGTransforms(tst4,"chord"))
dist(LGTransforms(tst4,"profile"))
dist(LGTransforms(tst4,"Hellinger"))
dist(LGTransforms(tst4,"chisq"))
rm(tst4)
matrix(c(0,0,1,4,1,0,8,1,0),3L,3L) -> LL329
matrix(c(0,0,1,4,1,0,8,1,0),3L,3L) -> LL329
dist(LL329)                             ## D1:  Euclidean
LGTransforms(tst4,"chord") -> tr        ## D3:  Chord
matrix(c(0,0,1,4,1,0,8,1,0),3L,3L) -> LL329
dist(LL329)                             ## D1:  Euclidean
LGTransforms(LL329,"chord") -> tr       ## D3:  Chord
tr
dist(tr)
## "Species profile" transformation (D18)
LGTransforms(LL329,"profile") -> tr
tr
dist(tr)
## Hellinger transformation (D17: Hellinger distance)
LGTransforms(LL329,"Hellinger") -> tr
tr
dist(tr)
## Chi-square transformation (D16: Chi-square distance)
LGTransforms(LL329,"chisq") -> tr
tr
dist(tr)
rm(list=ls())
library(codep)
dist(LL329)
matrix(c(0,0,1,4,1,0,8,1,0),3L,3L) -> LL329
## D1:  Euclidean distance
dist(LL329)
LGTransforms(LL329,"chord") -> tr
tr
dist(tr)
LGTransforms(LL329,"profile") -> tr
tr
dist(tr)
LGTransforms(LL329,"Hellinger") -> tr
tr
dist(tr)
LGTransforms(LL329,"chisq") -> tr
tr
dist(tr)
